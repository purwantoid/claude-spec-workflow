[project]
name = "spec_driven_workflow"
version = "1.0.0"
description = "Automated workflows for Claude Code. Includes spec-driven development (Requirements → Design → Tasks → Implementation) and streamlined bug fix workflow (Report → Analyze → Fix → Verify)."
readme = "README.md"
requires-python = ">=3.12"
authors = [
    { name = "purwantoid", email = "purwanto@outlook.com" },
    { name = "Pimzino" }
]
license = { text = "MIT" }
keywords = [
    "claude-code",
    "spec-workflow",
    "bug-fix-workflow",
    "requirements",
    "design",
    "tasks",
    "implementation",
    "ai-development",
    "automation",
    "development-workflow",
    "bug-tracking",
    "issue-resolution"
]

[project.urls]
Homepage = "https://github.com/pimzino/claude-code-spec-workflow"
Repository = "https://github.com/pimzino/claude-code-spec-workflow.git"
Issues = "https://github.com/pimzino/claude-code-spec-workflow/issues"

dependencies = [
    "aiofiles>=24.1.0",
    "claude-code-sdk>=0.0.20",
    "click>=8.2.1",
    "gitpython>=3.1.45",
    "inquirer>=3.4.1",
    "pathspec>=0.12.1",
    "pre-commit>=4.3.0",
    "pydantic>=2.11.7",
    "rich>=14.1.0",
    "watchdog>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "mypy>=1.17.1",
    "pre-commit>=4.3.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.9",
]
dashboard = [
    "aiofiles>=24.1.0",
    "websockets>=15.0.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N", # pep8-naming
    "S", # flake8-bandit (security)
    "T20", # flake8-print
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD", # pandas-vet
    "PL", # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # perflint
    "FURB", # refurb
    "RUF", # ruff-specific rules
]
ignore = [
    "S101", # Use of assert (common in tests)
    "T201", # Print statements (used in CLI output)
    "PLR0913", # Too many arguments to function call
    "TRY003", # Avoid specifying long messages outside exception class
]

# Exclude specific directories and files
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.isort]
known-first-party = ["spec_driven_workflow"]
split-on-trailing-comma = true
lines-between-types = 1

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101", # Use of assert in tests
    "PLR2004", # Magic value used in comparison
    "ARG001", # Unused function argument (common in test fixtures)
]
"spec_driven_workflow/cli.py" = [
    "T201", # Print statements in CLI
]
"spec_driven_workflow/dashboard/*" = [
    "T201", # Print statements in dashboard output
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=spec_driven_workflow",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_any_unimported = true
no_implicit_reexport = true
strict_optional = true
warn_missing_imports = true

# Exclude specific paths
exclude = [
    "build/",
    "dist/",
    "venv/",
    ".venv/",
]

# Per-module options
[[tool.mypy.overrides]]
module = [
    "inquirer.*",
    "watchdog.*",
    "git.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.coverage.run]
source = ["spec_driven_workflow"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]
ignore_errors = true
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True (used appropriately in CLI)

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/*_test.py"]
